<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
    <!ENTITY % CustomDTD SYSTEM "../custom.dtd">
    %CustomDTD;
    ]>
<chapter id="quickstart">
  <title>Quick start</title>
  <subtitle>Getting started with hotpotato's basics</subtitle>

  <sect1>
    <title>Dependencies</title>
    <para>
      In order to run &hotpotato; you'll need only JDK 1.6, SLF4J 1.6 and &Netty; (version 3.2 at the time of this
	  writting). Its heavily based on Netty so you'll be dealing with some of its HTTP classes and API's.
    </para>
    <para>
      There was no real reason to hide this API just to spend useless CPU cycles converting between both lib's API's.
    </para>
  </sect1>

  <sect1>
    <title>Your very first request</title>
    <para>
      &hotpotato; is not about one-liners. This library comes pre-configured with sensible defaults that suit the
      majority of usages but still, you're strongly advised to learn more about fine tuning &hotpotato; in
      <xref linkend="indepth" /> to suit it to your specific needs and extract maximum performance.
    </para>
    <para>
      So without further ado, here's how to perform a request, quick &amp; dirty.
    </para>
    <programlisting>import com.biasedbit.hotpotato.client.DefaultHttpClient;
import com.biasedbit.hotpotato.client.HttpClient;
import com.biasedbit.hotpotato.request.HttpRequestFuture;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpVersion;
...

// Create &amp; initialize the client <co id="example1.co1" />
HttpClient client = new DefaultHttpClient();
if (!client.init()) {
    return;
}

// Setup the request <co id="example1.co2" />
HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_0,
                                             HttpMethod.GET, "/");

// Execute the request <co id="example1.co3" />
HttpRequestFuture future = client.execute("hotpotato.biasedbit.com", 80, request);
future.awaitUninterruptibly();
System.out.println(future);

// Cleanup <co id="example1.co4" />
client.terminate();</programlisting>
    <calloutlist>
      <callout arearefs="example1.co1">
        <para>
          Every client must be initialized before being used. By default, you can simply call
          <methodname>init()</methodname> on a new instance without configuration. We'll address configuration later.
        </para>
        <para>
          As a future reference, the same client can be used by multiple threads at the same time - that's kind of its
          purpose actually. So you might consider using the same instance across your application.
        </para>
      </callout>
      <callout arearefs="example1.co2">
        <para>
          The HTTP requests are &Netty;'s API. Every header must be manually set prior to the execution request.
        </para>
      </callout>
      <callout arearefs="example1.co3">
        <para>
          The request is executed by calling one of the variants of <methodname>execute()</methodname> on a initialized
          &HttpClient;. This returns a &HttpRequestFuture;. We'll cover the futures shortly so for now just keep in mind
          its what allows you to execute requests either synchronously or asynchronously. Calling
          <methodname>awaitUninterruptibly()</methodname> on a future will cause the calling thread to halt until
          the future completes, either due to timeout, failure, success or cancelation. After the request is executed,
          the future is printed out to the console so you can see the response status.
        </para>
        <para>
          For the sake of first example simplicity, this particular version of <methodname>execute()</methodname>
          discards the request result.
        </para>
      </callout>
      <callout arearefs="example1.co4">
        <para>
          Every client should always be terminated once it's no longer necessary.
        </para>
      </callout>
    </calloutlist>
  </sect1>

  <sect1>
    <title>Processing responses</title>
    <para>
      In the first example we discarded the response to our request. While you may encounter such cases, the odds are
      that in the vast majority of the situations you'll want to receive and process the contents of the response,
      either in the form of HTTP headers or body.
    </para>
    <para>
      This is where &HttpResponseProcessor; comes in. This component will allow the &HttpClient; to determine whether
      the response body should be consumed or not, through <methodname>willProcess()</methodname> method. For each
      request you execute, you just pass along an implementation of this interface (that version of
      <methodname>execute()</methodname> we used on the previous example implicitly used an instance of this processor
      that simply discards anything) and its <methodname>willProcess()</methodname> method will be called. Should this
      method return true, <methodname>addData()</methodname> and <methodname>addLastData()</methodname> will be called
      as soon as new data arrives on the sockets.
    </para>
    <para>
      &BodyAsStringResponseProcessor; is an example of such implementation. It reads the bytes received in the response
      and buffers them until the last piece of information is received. Once it arrives, it generates a string (hence
      its original name...).
    </para>
    <para>
      Go ahead and run the previous example, replacing the line:
    </para>
    <programlisting>HttpRequestFuture future = client.execute("hotpotato.biasedbit.com", 80, request);</programlisting>
    <para>
      With the line:
    </para>
    <programlisting>HttpRequestFuture future = client.execute("hotpotato.biasedbit.com", 80, request,
                                          new BodyAsStringResponseProcessor());</programlisting>
    <para>
      This will effectively make the response be processed. You might want to see it, though. Add this right after the
      <code>System.out.println()</code> call in the previous example.
    </para>
    <programlisting>if (future.isSuccessfull()) { <co id="example2.co1" />
    System.out.println(future.getProcessedResponse());
}</programlisting>
    <calloutlist>
      <callout arearefs="example2.co1">
        <para>
          Note that there is a difference between <methodname>isSuccessful()</methodname> and
          <methodname>isSuccessfulResponse()</methodname>. While the first will return <code>true</code> if the request
          completes, no matter which response code is received (<literal>200</literal>, <literal>300</literal>,
          <literal>400</literal>, ...), the second will only return <code>true</code> if the request completed and the
          response code was between <literal>200</literal> and <literal>299</literal> (inclusive).
        </para>
      </callout>
    </calloutlist>
  </sect1>

  <sect1>
    <title>Synchronous vs asynchronous</title>
    <para>
      Handling the response body happens transparently. Handling the results of the whole transaction, however, will
      have to be explicitly performed by the programmer. There are two ways to wait for a request to complete:
      <itemizedlist>
        <listitem><para>synchronously - blocking calls to <methodname>execute()</methodname></para></listitem>
        <listitem><para>asynchronously - non-blocking calls to <methodname>execute()</methodname></para></listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Synchronous requests</title>
      <para>
        Synchronous requests are requests whose calling thread (i.e. the thread that calls
        <methodname>execute()</methodname> on the &HttpClient; instance) will block by calling a variant of
        <methodname>await()</methodname>. Only when the &HttpRequestFuture; completes either through success, failure
        or cancellation will the calling thread be unlocked and normal execution continue, as shown below:
      </para>
      <programlisting>HttpRequestFuture future = client.execute("hotpotato.biasedbit.com", 80, request);
future.awaitUninterruptibly();
// keep doing something stuff after having waited...</programlisting>
    </sect2>
    <sect2>
      <title>Asynchronous requests</title>
      <para>
        Asyncronous requests allow the thread calling <methodname>execute()</methodname> on the &HttpClient; to adopt
        a fire-and-forget paradigm. It instructs the client to perform the request and provides a listener that will
        perform some computation as soon as the request completes. The important difference is that this is a
        non-blocking call, which means that this computation will take place on another thread (an internal thread of
        the &HttpClient; implementation) rather than on the thread calling <methodname>execute()</methodname>.
      </para>
      <programlisting>HttpRequestFuture&lt;String&gt; future;
future = client.execute("hotpotato.biasedbit.com", 80, request,
                        new BodyAsStringProcessor());

future.addListener(new HttpRequestFutureListener&lt;String&gt;() {
    @Override
    public void operationComplete(HttpRequestFuture future) throws Exception {
        System.out.println(future);
        if (future.isSuccessfulResponse()) {
            System.out.println(future.getProcessedResult());
        }
    }
});
// immediately keep doing stuff!</programlisting>
    </sect2>
  </sect1>

  <sect1>
    <title>Adding headers and body to requests</title>
    <para>
      Being a server-side tool, the basic API of &hotpotato; is quite raw. You'll have to set every header manually.
      Yes, even HOST headers.
    </para>
    <para>
      Preparing the request is extremely simple, following Netty's own API for &HttpRequest;.
      So without further ado, here's a simple example of how to perform a POST with a zip file.
    </para>
    <programlisting>// read some zip file
byte[] fileBytes = readSomeFile("/path/to/archive.zip");

// create the request and add some headers
HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_0,
                                             HttpMethod.POST, "/uri");
request.setContent(ChannelBuffers.copiedBuffer(fileBytes));
request.setHeader(HttpHeaders.Names.CONTENT_LENGTH, fileBytes.length);
request.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/x-zip-compressed");

// execute the post and transfer the data
HttpRequestFuture future = client.execute("hotpotato.biasedbit.com", 80, request);
// register a listener, perform some variant of await() or just forget about it
    </programlisting>
  </sect1>

  <sect1>
    <title>The &HttpSession; interface</title>
    <para>
      Before proceeding to shutting down and cleaning up, lets make a quick stop at the &HttpSession; interface:
      an attempt to provide a simpler interface for &hotpotato;.
    </para>
    <para>
      Since &hotpotato; was originally designed for server-side usage, it's API often strikes developers as
      non-intuitive. This interface and its sattelite classes/interfaces provides an approach similar to other HTTP
      client libraries.
    </para>
  <para>
   The main features of this layer are:
    <itemizedlist>
      <listitem><para>Accepting full URL as parameters (e.g.: http://www.google.com);</para></listitem>
      <listitem><para>Automated handling of redirect codes;</para></listitem>
      <listitem><para>Automated handling of Basic and Digest HTTP authentication;</para></listitem>
      <listitem><para>HTTP 1.0 and 1.1 proxy support;</para></listitem>
      <listitem><para>Automated handling (optional) of cookies.</para></listitem>
    </itemizedlist>
  </para>
    <programlisting>// Create the client - always necessary!
DefaultHttpClient httpClient = new DefaultHttpClient();
if (!httpClient.init()) {
  return;
}

// Create an HttpSession backed by the client
DefaultHttpSession session = new DefaultHttpSession(httpClient);

HttpRequestFuture f = session.execute("http://google.com", HttpVersion.HTTP_1_1,
                                      HttpMethod.GET,
                                      new BodyAsStringProcessor(200)); <co id="example3.co1" />
f.awaitUninterruptibly();
System.out.println(f);
if (f.isSuccessfulResponse()) {
  System.out.println(f.getProcessedResult());
}

httpClient.terminate();
    </programlisting>
    <calloutlist>
      <callout arearefs="example3.co1">
        <para>
          Notice that there is no need to set extra headers for the HTTP 1.1 request. Also, passing the
          <literal>200</literal> code in <classname>BodyAsStringProcessor</classname>'s constructors tells this
          instance that it should only transform contents into a string if the HTTP response code is
          <literal>200</literal>.
        </para>
      </callout>
    </calloutlist>
    <para>
      For more details on this layer, please refer to <xref linkend="indepth" />.
    </para>
  </sect1>

  <sect1>
    <title>Shutting down and cleaning resources</title>
    <para>
      &HttpClient; implementations
      <footnote><para>Well, actually there's just one, &DefaultHttpClient;...</para></footnote> are very self-contained.
      In order to terminate an instance you simply call <methodname>terminate()</methodname> and it pretty much does the
      rest itself: cancels all pending requests, terminates all active connections and finishes any &HttpRequestFuture;s
      left to be finished.
    </para>
    <para>
      The only exception is when you add an external &TimeoutManager; to a &HttpClient; instance, which you will have
      to manually initialize and terminate. Other than that, simply calling <methodname>terminate()</methodname> will
      ensure all resources are properly released and any waiting threads will proceed.
    </para>
  </sect1>

  <sect1>
    <title>Summary</title>
    <para>
      In this chapter we covered the basics behind the usage of &hotpotato;. You've learned the lifecycle of a
      &HttpClient; instance: creation, initialization, execution, termination. You also learned how to perform all sorts
      of requests and deal with responses.
    </para>
    <para>
      &hotpotato; is configured with sensible defaults, which means you can pretty much just create a
      &DefaultHttpClient; and start firing away requests and you're guaranteed to have yourself a pretty fast and
      scalable Java HTTP client. However, as this library was developed to be used in servers rather than in clients -
      and since this usually means very specific use cases - it can be heavily configured as we will see in
      <xref linkend="indepth" />.
    </para>
  </sect1>
</chapter>